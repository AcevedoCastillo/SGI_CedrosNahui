@page "/client/home"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@using CedrosNahuizalquenos.Client.Models
@using CedrosNahuizalquenos.Client.Pages.Pedidos

<MudPaper Class="pa-4 ma-2" Elevation="1">
    <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
        <MudText Typo="Typo.h3" Align="Align.Center" Class="font-weight-bold">
            <MudIcon Icon="@Icons.Material.Filled.Home" Class="mr-2" />
            Bienvenido al Sistema de Gestión de Pedidos
        </MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center">
            Administra y supervisa tus pedidos de forma sencilla y eficiente.
        </MudText>
    </MudStack>

    <MudGrid Class="mb-4" Justify="Justify.Center">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="3" Color="Color.Surface">
                <MudStack AlignItems="AlignItems.Center" Spacing="1">
                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1">
                        <MudIcon Icon="@Icons.Material.Filled.ListAlt" Color="Color.Primary" />
                        <MudText Typo="Typo.h6">Total de Pedidos</MudText>
                    </MudStack>
                    <MudText Typo="Typo.h5" Align="Align.Center">@_pedidos.Count</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="3" Color="Color.Surface">
                <MudStack AlignItems="AlignItems.Center" Spacing="1">
                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1">
                        <MudIcon Icon="@Icons.Material.Filled.HourglassEmpty" Color="Color.Warning" />
                        <MudText Typo="Typo.h6">Pendientes</MudText>
                    </MudStack>
                    <MudText Typo="Typo.h5" Align="Align.Center">@_pedidos.Count(p => p.Estado == "Por Validar")</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="3" Color="Color.Surface">
                <MudStack AlignItems="AlignItems.Center" Spacing="1">
                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                        <MudText Typo="Typo.h6">Aprobados</MudText>
                    </MudStack>
                    <MudText Typo="Typo.h5" Align="Align.Center">@_pedidos.Count(p => p.Estado == "Aprobado")</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudStack Direction="Row" Spacing="2" Class="mb-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CrearNuevoPedido" StartIcon="@Icons.Material.Filled.Add">
            Nuevo Pedido
        </MudButton>
    </MudStack>
    <MudText Typo="Typo.h4" Align="Align.Center" Class="font-weight-bold">
        Ultimos 5 pedidos
    </MudText>
    <MudTable Items="_pedidos.Take(5)" Dense="true" Hover="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Cliente</MudTh>
            <MudTh>Estado</MudTh>
            <MudTh>Fecha</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.PedidoId</MudTd>
            <MudTd>@context.Cliente?.Nombre</MudTd>
            <MudTd>@context.Estado</MudTd>
            <MudTd>@context.FechaPedido.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                               Color="Color.Primary"
                               OnClick="() => VerDetallePedido(context)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<PedidoDTO> _pedidos = new();
    private int rolId;
    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;
            rolId = await LocalStorage.GetItemAsync<int>("rolId");

            if (rolId == 0)
            {
                Snackbar.Add("Debes iniciar sesión para acceder a esta pantalla.", Severity.Error);
                Navigation.NavigateTo("/client");
                return;
            }

            await CargarPedidosAsync();
            StateHasChanged();
        }
    }

    private async Task CargarPedidosAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<PedidoDTO>>("api/Pedido");
            if (result != null)
                _pedidos = result;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar pedidos: {ex.Message}", Severity.Error);
        }
    }

    private async Task VerDetallePedido(PedidoDTO pedido)
    {
        var parameters = new DialogParameters { ["Pedido"] = pedido };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<DetallePedidoDialog>("Detalle del Pedido", parameters, options);
    }

    private void CrearNuevoPedido()
    {
        Navigation.NavigateTo("/client/nuevo-pedido");
    }

    private void VerReportes()
    {
        Navigation.NavigateTo("/client/reportes");
    }
}

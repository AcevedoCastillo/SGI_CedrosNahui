@page "/usuarios/crear"
@inject HttpClient Http
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations
@using CedrosNahuizalquenos.Client.Models

<div style="display: flex; justify-content: center; align-items: center;">
    <MudPaper Class="pa-16 ma-2" MaxWidth="600px" Elevation="3">
        <MudText Typo="Typo.h4" Class="mb-6 text-center" Color="Color.Primary">Formulario de Usuario</MudText>

        <MudForm @ref="form" OnValidSubmit="CrearUsuarioAsync" OnInvalidSubmit="OnInvalidSubmit">

            <MudTextField Label="Nombre" Required="true"
                          @bind-Value="usuario.Nombre"
                          Immediate="true"
                          HelperText="Ingrese el nombre completo"
                          Validation="@(new Func<string, string>(ValidarNombre))" />

            <MudTextField Label="Correo electrónico"
                          @bind-Value="usuario.Correo"
                          Immediate="true"
                          HelperText="Ej: correo@dominio.com"
                          Validation="@(new Func<string, string>(ValidarCorreo))" />

            <MudTextField Label="Contraseña" Required="true"
                          @bind-Value="usuario.Contrasena"
                          Immediate="true"
                          InputType="InputType.Password"
                          HelperText="Debe tener al menos 6 caracteres"
                          Validation="@(new Func<string, string>(ValidarContrasena))" />

            <MudSelect T="int" Label="Rol" @bind-Value="usuario.Rol" Required="true">
                <MudSelectItem Value="1" >Administrador</MudSelectItem>
                <MudSelectItem Value="2">Usuario</MudSelectItem>
            </MudSelect>

            <MudSwitch T="bool" @bind-Value="usuario.Activo" Color="Color.Primary" />

            <MudDatePicker Label="Fecha de Registro"
                           @bind-Date="usuario.FechaRegistro"
                           Required="true"
                           For="@(() => usuario.FechaRegistro)" />

            <MudButton Disabled="@_processing"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-6 w-100"
                       OnClick="CrearUsuarioAsync"
                       ButtonType="ButtonType.Submit">
                @if (_processing)
                {
                    <MudProgressCircular Class="me-2" Size="Size.Small" Indeterminate="true" Color="Color.Primary" />
                    <MudText Class="ms-2">Procesando...</MudText>
                }
                else
                {
                    <MudText>Guardar Usuario</MudText>
                }
            </MudButton>
        </MudForm>
    </MudPaper>
</div>

@code {
    private MudForm form;
    private UsuarioDTO usuario = new() { FechaRegistro = DateTime.Now, Rol = 1 };
    private bool _processing = false;

    private async Task CrearUsuarioAsync()
    {
        _processing = true;
        StateHasChanged();

        await form.Validate();

        if (!form.IsValid)
        {
            _processing = false;
            StateHasChanged();
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/usuarios", usuario);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Usuario creado exitosamente", Severity.Success);
                usuario = new UsuarioDTO();
                usuario.FechaRegistro = DateTime.Now;
                usuario.Rol = 1; 

                _processing = false;
                StateHasChanged();
                await form.ResetAsync();
            }
            else
            {
                Snackbar.Add(await response.Content.ReadAsStringAsync(), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);

            StateHasChanged();
            _processing = false;
        }
        finally
        {
       
        }
    }

    private void OnInvalidSubmit()
    {
        Snackbar.Add("Por favor, corrija los errores en el formulario.", Severity.Warning);
    }

    private string ValidarNombre(string nombre)
    {
        if (string.IsNullOrWhiteSpace(nombre)) return "El nombre es obligatorio.";
        return nombre.Length < 3 ? "Debe tener al menos 3 caracteres." : null;
    }

    private string ValidarCorreo(string correo)
    {
        if (string.IsNullOrWhiteSpace(correo)) return "Correo requerido.";
        return new EmailAddressAttribute().IsValid(correo) ? null : "Correo inválido.";
    }

    private string ValidarContrasena(string pass)
    {
        if (string.IsNullOrWhiteSpace(pass)) return "Contraseña requerida.";
        return pass.Length < 6 ? "Mínimo 6 caracteres." : null;
    }
}